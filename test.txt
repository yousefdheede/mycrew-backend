

from fastapi import FastAPI, Query
from typing import List

app = FastAPI()

jobs = [
    {"id": 1, "title": "Software Engineer", "company": "ACME Corp"},
    {"id": 2, "title": "Data Scientist", "company": "XYZ Inc"},
    {"id": 3, "title": "DevOps Engineer", "company": "ABC Ltd"},
    {"id": 4, "title": "Quality Assurance", "company": "MNO Group"},
]

@app.get("/jobs")
async def search_jobs(
    title: str = Query(None, min_length=3, max_length=100),
    company: str = Query(None, min_length=3, max_length=100),
    location: str = Query(None, min_length=3, max_length=100),
    tags: List[str] = Query(None)
):
    results = jobs
    if title:
        results = [job for job in results if title.lower() in job["title"].lower()]
    if company:
        results = [job for job in results if company.lower() in job["company"].lower()]
    if location:
        # Add logic for filtering by location
        pass
    if tags:
        # Add logic for filtering by tags
        pass
    return results
#########################
###########################
import fastapi
from fastapi import FastAPI, Query, HTTPException
from pydantic import BaseModel

app = FastAPI()

class Job(BaseModel):
    title: str
    company: str
    location: str
    description: str
    salary: float

@app.get("/jobs")
def search_jobs(
    q: str = Query(None, min_length=2, max_length=50, regex=r"^[a-zA-Z0-9 ]*$"),
    location: str = Query(None, min_length=2, max_length=50, regex=r"^[a-zA-Z0-9 ]*$"),
    salary: float = Query(None, gt=0)
):
    jobs = []
    # Query database or external API to search for jobs based on provided parameters
    if q:
        jobs = filter(lambda j: q in j.title or q in j.description, jobs)
    if location:
        jobs = filter(lambda j: location in j.location, jobs)
    if salary:
        jobs = filter(lambda j: salary <= j.salary, jobs)
    return jobs

@app.post("/jobs")
def create_job(job: Job):
    # Save job to database or external API
    return job

@app.put("/jobs/{id}")
def update_job(id: int, job: Job):
    # Update job in database or external API
    return job

@app.delete("/jobs/{id}")
def delete_job(id: int):
    # Delete job from database or external API
    return {"message": "Successfully deleted job"}
